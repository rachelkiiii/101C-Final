import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix, roc_curve, auc
import matplotlib.pyplot as plt
df = pd.read_csv("/Users/kaylinlee/Desktop/cleandata.csv")
X = df['review']
y = df['sentiment']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

tfidf_vectorizer = TfidfVectorizer(max_features=5000)
X_train_tfidf = tfidf_vectorizer.fit_transform(X_train)
X_test_tfidf = tfidf_vectorizer.transform(X_test)

# different tree depths
depths = [5, 10, 15, 20]
accuracies = []

for depth in depths:
    rf_classifier = RandomForestClassifier(n_estimators=100, max_depth=depth, random_state=42)
    rf_classifier.fit(X_train_tfidf, y_train)
    y_pred = rf_classifier.predict(X_test_tfidf)

    accuracy = accuracy_score(y_test, y_pred)
    accuracies.append(accuracy)
    print(f"Accuracy with max_depth={depth}: {accuracy:.2f}")

# Plot of model accuracy based on different tree depths
plt.plot(depths, accuracies, marker='o')
plt.xlabel('Tree Depth')
plt.ylabel('Accuracy')
plt.title('Impact of Tree Depth on Random Forest Model Accuracy')
plt.show()

# Choose one optimal depth
optimal_depth = depths[accuracies.index(max(accuracies))]

# Random Forest classifier with the optimal tree depth
optimal_rf_classifier = RandomForestClassifier(n_estimators=100, max_depth=optimal_depth, random_state=42)
optimal_rf_classifier.fit(X_train_tfidf, y_train)
y_pred_optimal = optimal_rf_classifier.predict(X_test_tfidf)

accuracy_optimal = accuracy_score(y_test, y_pred_optimal)
print(f"\nAccuracy with optimal tree depth ({optimal_depth}): {accuracy_optimal:.2f}")
print("\nClassification Report for the Optimal Model:\n", classification_report(y_test, y_pred_optimal))
print("\nConfusion Matrix for the Optimal Model:\n", confusion_matrix(y_test, y_pred_optimal))


y_prob_optimal = optimal_rf_classifier.predict_proba(X_test_tfidf)[:, 1]
fpr, tpr, thresholds = roc_curve(y_test.map({'negative': 0, 'positive': 1}), y_prob_optimal)
roc_auc = auc(fpr, tpr)

# ROC curve
plt.figure(figsize=(8, 8))
plt.plot(fpr, tpr, color='darkorange', lw=2, label=f'ROC curve (area = {roc_auc:.2f})')
plt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--')
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('ROC Curve for the Optimal Random Forest Model')
plt.legend(loc='lower right')
plt.show()
